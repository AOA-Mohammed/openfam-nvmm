/*
 *  (c) Copyright 2015-2021 Hewlett Packard Enterprise Development Company LP.
 *
 *  Author: Jason Low <jason.low2@hpe.com>
 *
 *  This software is available to you under a choice of one of two
 *  licenses. You may choose to be licensed under the terms of the
 *  GNU Lesser General Public License Version 3, or (at your option)
 *  later with exceptions included below, or under the terms of the
 *  MIT license (Expat) available in COPYING file in the source tree.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef _FAM_ATOMIC_X86_H_
#define _FAM_ATOMIC_X86_H_

#include <stdbool.h>
#include <stdint.h>
#include <sys/ioctl.h>
#include <sys/types.h>

#include "nvmm/nvmm_fam_atomic.h"

/*
 * The libfam-atomic library is compiled in C, so when C++ applications
 * use the fam atomic interfaces, the compiler needs to be notified
 * that the fam atomic functions are compiled in C. We'll specify the
 * extern "C" in the header file so that C++ applications don't need
 * to worry about this.
 */
#ifdef __cplusplus
extern "C" {
#endif

/* Fabric Attached Memory Atomic ioctl interface */

struct fam_atomic_args_32 {
    int lfs_fd;
    int64_t offset;
    int32_t p32_0, p32_1;
};

struct fam_atomic_args_64 {
    int lfs_fd;
    int64_t offset;
    int64_t p64_0, p64_1;
};

struct fam_atomic_args_128 {
    int lfs_fd;
    int64_t offset;
    int64_t p128_0[2], p128_1[2];
};

#define _FAM_ATOMIC_MAGIC 0xaa
#define _FAM_ATOMIC_32_FETCH_AND_ADD_NR 0x11
#define _FAM_ATOMIC_64_FETCH_AND_ADD_NR 0x12
#define _FAM_ATOMIC_32_SWAP_NR 0x21
#define _FAM_ATOMIC_64_SWAP_NR 0x22
#define _FAM_ATOMIC_128_SWAP_NR 0x23
#define _FAM_ATOMIC_32_COMPARE_AND_STORE_NR 0x31
#define _FAM_ATOMIC_64_COMPARE_AND_STORE_NR 0x32
#define _FAM_ATOMIC_128_COMPARE_AND_STORE_NR 0x33
#define _FAM_ATOMIC_128_READ_NR 0x43
#define _FAM_ATOMIC_WR(nr, type) _IOWR(_FAM_ATOMIC_MAGIC, (nr), type)
#define _FAM_ATOMIC_R(nr, type) _IOR(_FAM_ATOMIC_MAGIC, (nr), type)

/* temp = *offset; *offset += p0; p0 = temp */
#define FAM_ATOMIC_32_FETCH_AND_ADD                                            \
    _FAM_ATOMIC_WR(_FAM_ATOMIC_32_FETCH_AND_ADD_NR, struct fam_atomic_args_32)
#define FAM_ATOMIC_64_FETCH_AND_ADD                                            \
    _FAM_ATOMIC_WR(_FAM_ATOMIC_64_FETCH_AND_ADD_NR, struct fam_atomic_args_64)

/* temp = *offset; *offset = p0; p0 = temp; */
#define FAM_ATOMIC_32_SWAP                                                     \
    _FAM_ATOMIC_WR(_FAM_ATOMIC_32_SWAP_NR, struct fam_atomic_args_32)
#define FAM_ATOMIC_64_SWAP                                                     \
    _FAM_ATOMIC_WR(_FAM_ATOMIC_64_SWAP_NR, struct fam_atomic_args_64)
#define FAM_ATOMIC_128_SWAP                                                    \
    _FAM_ATOMIC_WR(_FAM_ATOMIC_128_SWAP_NR, struct fam_atomic_args_128)

/* temp = *offset; if (temp == p0) *offset = p1; p0 = temp; */
#define FAM_ATOMIC_32_COMPARE_AND_STORE                                        \
    _FAM_ATOMIC_WR(_FAM_ATOMIC_32_COMPARE_AND_STORE_NR,                        \
                   struct fam_atomic_args_32)
#define FAM_ATOMIC_64_COMPARE_AND_STORE                                        \
    _FAM_ATOMIC_WR(_FAM_ATOMIC_64_COMPARE_AND_STORE_NR,                        \
                   struct fam_atomic_args_64)
#define FAM_ATOMIC_128_COMPARE_AND_STORE                                       \
    _FAM_ATOMIC_WR(_FAM_ATOMIC_128_COMPARE_AND_STORE_NR,                       \
                   struct fam_atomic_args_128)

/* p0 = *offset */
#define FAM_ATOMIC_128_READ                                                    \
    _FAM_ATOMIC_R(_FAM_ATOMIC_128_READ_NR, struct fam_atomic_args_128)

// wrapper for unsigned integers
inline uint32_t fam_atomic_u32_read(uint32_t *addr) {
    return (uint32_t)fam_atomic_32_read((int32_t *)addr);
}

inline uint64_t fam_atomic_u64_read(uint64_t *addr) {
    return (uint64_t)fam_atomic_64_read((int64_t *)addr);
}

inline void fam_atomic_u128_read(uint64_t *address, uint64_t result[2]) {
    fam_atomic_128_read((int64_t *)address, (int64_t *)result);
}

inline void fam_atomic_u32_write(uint32_t *addr, uint32_t value) {
    fam_atomic_32_write((int32_t *)addr, (int32_t)value);
}

inline void fam_atomic_u64_write(uint64_t *addr, uint64_t value) {
    fam_atomic_64_write((int64_t *)addr, (int64_t)value);
}

inline void fam_atomic_u128_write(uint64_t *addr, uint64_t value[2]) {
    fam_atomic_128_write((int64_t *)addr, (int64_t *)value);
}

inline uint32_t fam_atomic_u32_fetch_and_add(uint32_t *addr,
                                             uint32_t increment) {
    return (uint32_t)fam_atomic_32_fetch_add((int32_t *)addr,
                                             (int32_t)increment);
}

inline uint64_t fam_atomic_u64_fetch_and_add(uint64_t *addr,
                                             uint64_t increment) {
    return (uint64_t)fam_atomic_64_fetch_add((int64_t *)addr,
                                             (int64_t)increment);
}

inline uint32_t fam_atomic_u32_compare_and_store(uint32_t *addr,
                                                 uint32_t oldval,
                                                 uint32_t newval) {
    return (uint32_t)fam_atomic_32_compare_store(
        (int32_t *)addr, (int32_t)oldval, (int32_t)newval);
}

inline uint64_t fam_atomic_u64_compare_and_store(uint64_t *addr,
                                                 uint64_t oldval,
                                                 uint64_t newval) {
    return (uint64_t)fam_atomic_64_compare_store(
        (int64_t *)addr, (int64_t)oldval, (int64_t)newval);
}

inline void fam_atomic_u128_compare_and_store(uint64_t *addr,
                                              uint64_t oldval[2],
                                              uint64_t newval[2],
                                              uint64_t result[2]) {
    fam_atomic_128_compare_store((int64_t *)addr, (int64_t *)oldval,
                                 (int64_t *)newval, (int64_t *)result);
}

inline int32_t fam_atomic_32_fetch_and_add(int32_t *addr, int32_t increment) {
    return (int32_t)fam_atomic_32_fetch_add((int32_t *)addr,
                                            (int32_t)increment);
}

inline int64_t fam_atomic_64_fetch_and_add(int64_t *addr, int64_t increment) {
    return (int64_t)fam_atomic_64_fetch_add((int64_t *)addr,
                                            (int64_t)increment);
}

inline int32_t fam_atomic_32_compare_and_store(int32_t *addr, int32_t oldval,
                                               int32_t newval) {
    return (int32_t)fam_atomic_32_compare_store(
        (int32_t *)addr, (int32_t)oldval, (int32_t)newval);
}

inline int64_t fam_atomic_64_compare_and_store(int64_t *addr, int64_t oldval,
                                               int64_t newval) {
    return (int64_t)fam_atomic_64_compare_store(
        (int64_t *)addr, (int64_t)oldval, (int64_t)newval);
}

inline void fam_atomic_128_compare_and_store(int64_t *addr, int64_t oldval[2],
                                             int64_t newval[2],
                                             int64_t result[2]) {
    fam_atomic_128_compare_store((int64_t *)addr, (int64_t *)oldval,
                                 (int64_t *)newval, (int64_t *)result);
}

#ifdef __cplusplus
}
#endif

#endif /* _FAM_ATOMIC_X86_H_ */
