/*
 *  (c) Copyright 2016-2017 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

/*
  modified from the stack implementation from Mark
 */

#ifndef _NVMM_ZONE_ENTRY_STACK_H_
#define _NVMM_ZONE_ENTRY_STACK_H_

#include "nvmm/global_ptr.h"
#include "shelf_usage/smart_shelf.h"

namespace nvmm {

/**
 ** A very simple lock-free stack of blocks
 **
 ** Must be allocated in FAM.
 **
 ** The blocks pushed on the stack must be cache line aligned, at
 ** least a cache line long, and not accessed by anyone else while on
 ** the stack.  They must also all belong to the same Shelf, which must
 ** be passed to pop and push.
 **/
struct ZoneEntryStack {
    // we access the following two fields atomically via 128-bit CAS:
    uint64_t head __attribute__ ((aligned (16)));
    uint64_t aba_counter;  // incremented each time head is written

    // returns 0 if stack is empty
    uint64_t pop (void *addr);
    void push(void *addr, uint64_t idx);

private:
    ZoneEntryStack(const ZoneEntryStack&);              // disable copying
    ZoneEntryStack& operator=(const ZoneEntryStack&);   // disable assignment
};


}

#endif
