/*
 *  (c) Copyright 2016-2017 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef _NVMM_ZONE_SHELF_HEAP_H_
#define _NVMM_ZONE_SHELF_HEAP_H_

#include <stddef.h>
#include <stdint.h>
#include <string>

#include "nvmm/error_code.h"
#include "nvmm/global_ptr.h"
#include "shelf_mgmt/shelf_file.h"

namespace nvmm {

class Zone;

class ShelfHeap
{
public:
    ShelfHeap() = delete;
    // the shelf file must already exist
    ShelfHeap(std::string pathname);
    ShelfHeap(std::string pathname, ShelfId shelf_id);
    ~ShelfHeap();

    ErrorCode Create(size_t size, void *helper, size_t helper_size, size_t min_alloc_size);
    ErrorCode Destroy();
    ErrorCode Verify();
    ErrorCode Recover();
    ErrorCode SetPermission(mode_t mode);

    bool IsOpen() const
    {
        return is_open_;
    }

    ErrorCode Open(void *helper, size_t helper_size);
    ErrorCode Close();
    size_t Size();
    size_t MinAllocSize();

    Offset Alloc(size_t size);
    void Free(Offset offset);

    bool IsValidOffset(Offset offset);
    bool IsValidPtr(void *addr);

    void *OffsetToPtr(Offset offset) const;
    Offset PtrToOffset(void *addr) const ;
    size_t get_bitmap_offset();

    void Merge();
    void OfflineRecover();
    void OnlineRecover();

    void Stats();
    ErrorCode Map(Offset offset, size_t size, void *addr_hint, int prot, void **mapped_addr);
    ErrorCode Unmap(Offset offset, void *mapped_addr, size_t size);

    static size_t get_header_size(size_t shelf_size, size_t min_obj_size);

private:
    ErrorCode OpenMapShelf(bool use_shelf_manager=false);
    ErrorCode UnmapCloseShelf(bool use_shelf_manager=false, bool unregister=false);
    bool is_open_;
    ShelfFile shelf_;
    void *addr_;

    void *helper_;
    size_t helper_size_;

    Zone *zone_;
};

} // namespace nvmm

#endif
