/*
 *  (c) Copyright 2016-2017 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef _NVMM_PROCESS_ID_H_
#define _NVMM_PROCESS_ID_H_

#include <fstream>
#include <sys/types.h>
#include <unistd.h>

namespace nvmm{

class ProcessID
{
public:
    ProcessID();

    // set current process's pid and its creation time
    void SetPid();

    // set process id's pid and its creation time
    void SetPid(uint64_t id);

    // is this process ID valid?
    bool IsValid();
    
    // check if this process is still alive
    bool IsAlive();

    friend std::ostream& operator<<(std::ostream& os, const ProcessID& pid)
    {
        os << "[" << pid.pid_ << ", " << pid.btime_ << "]";
        return os;
    }

    friend bool operator==(const ProcessID &left, const ProcessID &right)
    {
        return left.pid_ == right.pid_ && left.btime_ == right.btime_;
    }   

    friend bool operator!=(const ProcessID &left, const ProcessID &right)
    {
        return !(left == right);
    }   

private:
    uint64_t GetBtime(uint64_t pid);

    uint64_t pid_; 
    uint64_t btime_; // creation time (number of jiffies since the machine booted)
};


} // namespace nvmm

#endif
