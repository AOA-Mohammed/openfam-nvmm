/*
 *  (c) Copyright 2016-2017 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef _NVMM_EPOCH_ZONE_HEAP_H_
#define _NVMM_EPOCH_ZONE_HEAP_H_

#include <stddef.h>
#include <stdint.h>
#include <thread>
#include <mutex>
#include <condition_variable>

#include "nvmm/error_code.h"
#include "nvmm/global_ptr.h"
#include "nvmm/shelf_id.h"
#include "nvmm/heap.h"

#include "shelf_mgmt/pool.h"
#include "shelf_usage/zone_entry_stack.h"

namespace nvmm{

class ShelfHeap;
class ShelfRegion;

// zone heap with delayed free
// the only difference from the regular zone heap is: we store the 5 global lists for delayed free
// at the beginning of the header shelf
class EpochZoneHeap : public Heap
{
public:
    EpochZoneHeap() = delete;
    EpochZoneHeap(PoolId pool_id);
    ~EpochZoneHeap();

    ErrorCode Create(size_t shelf_size);
    ErrorCode Destroy();
    bool Exist();

    ErrorCode Open();
    ErrorCode Close();
    size_t Size();
    bool IsOpen()
    {
        return is_open_;
    }

    GlobalPtr Alloc (size_t size);
    void Free (GlobalPtr global_ptr);

    GlobalPtr Alloc (EpochOp &op, size_t size);
    void Free(EpochOp &op, GlobalPtr global_ptr);

    void *GlobalToLocal(GlobalPtr global_ptr);
    // TODO: not implemented yet
    GlobalPtr LocalToGlobal(void *addr);

    size_t MinAllocSize();
    void Merge();
    void OnlineRecover();
    void OfflineRecover();
    void Stats();

private:
    static int const kHeaderIdx = 0; // headers for zone
    static int const kZoneIdx = 1; // zone

    static int const kListCnt = 5; // 5 global freelists for delayed free
    static uint64_t const kWorkerSleepMicroSeconds = 50000;
    uint64_t kFreeCnt = 1000; // free up to 1000 chunks everytime the background worker wakes up

    PoolId pool_id_;
    Pool pool_;

    size_t rmb_size_;
    ShelfHeap *rmb_; // zone heap

    size_t region_size_;
    ShelfRegion *region_; // headers of global freelists + headers of allocated memory chunks fron
                          // zone heap
    void *mapped_addr_;
    void *header_;

    ZoneEntryStack *global_list_;
    uint64_t min_obj_size_;

    bool is_open_;

    // for the background cleaner thread
    std::thread cleaner_thread_;
    std::mutex cleaner_mutex_;
    std::condition_variable running_cv_;
    bool cleaner_start_;
    bool cleaner_stop_;
    bool cleaner_running_;

    // start/stop the background cleaner
    int StartWorker();
    int StopWorker();
    void BackgroundWorker();
    void OfflineFree();
};
} // namespace nvmm
#endif
